schema {
  query: Query
  mutation: Mutation
}

input CreatePostInput {
  body: JSONObject!
  published: Boolean
  subTopics: [String!]
  title: String!
  topics: [String!]
}

input CreateUserInput {
  email: String!
  google_id: String
  img: String
  password: String
  username: String!
}

input CreateVersionPostInput {
  body: JSONObject!
  postId: Float!
  published: Boolean
  subTopics: [String!]
  title: String!
  topics: [String!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input FindManyUserInput {
  email: String
  google_id: String
  img: String
  password: String
  username: String
}

input FindOneUserInput {
  email: String
  username: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginInput {
  email: String!
  password: String!
}

type Mutation {
  createPost(createPostInput: CreatePostInput!): Post!
  createVersionPost(createVersionPostInput: CreateVersionPostInput!): Post!
  publish(publishInput: Int!): Post!
  register(registerInput: CreateUserInput!): User!
  removePost(id: Int!): Post!
  removeUser(id: Int!): User!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

input PartialPostInput {
  body: JSONObject
  published: Boolean
  subTopics: [String!]
  title: String
  topics: [String!]
  userId: Float
}

type Post {
  body: [JSON!]!
  commentsQuantity: Int
  createdAt: DateTime!
  description: String
  id: Int!
  img: String
  isArchived: Boolean!
  minutes: Int
  postId: Float
  published: Boolean!
  rating: Int
  reviewsQuantity: Int
  subTopics: [Topic!]
  title: String!
  topics: [Topic!]
  updatedAt: DateTime!
  user: User!
  userId: Int!
  version: Float!
}

type Query {
  algoPosts(findAlgorithmPostsInput: PartialPostInput!): [Post!]!
  draft(id: Int!): Post!
  login(loginInput: LoginInput!): User!
  post(id: Int!): Post!
  user(loginInput: FindOneUserInput!): User!
  userDrafts: [Post!]!
  userPosts(userId: Int!): [Post!]!
  users(findManyInput: FindManyUserInput!): [User!]!
}

type Topic {
  createdAt: DateTime!
  title: Int!
  updatedAt: DateTime!
}

input UpdatePostInput {
  body: JSONObject
  id: Int!
  published: Boolean
  subTopics: [String!]
  title: String
  topics: [String!]
}

input UpdateUserInput {
  email: String
  google_id: String
  id: Int!
  img: String
  password: String
  username: String
}

type User {
  createdAt: DateTime!
  email: String!
  google_id: String!
  id: Int!
  img: String!
  occupation: String!
  password: String!
  posts: [Post!]!
  role: String!
  updatedAt: DateTime!
  username: String!
}