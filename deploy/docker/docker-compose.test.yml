networks:
  backend:
    driver: bridge
  frontend:
    name: infrastructure
    driver: bridge

services:
  gateway:
    container_name: ${GATEWAY_SERVICE_HOST}
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.development
      args:
        SERVICE_NAME: gateway
    restart: always
    hostname: ${GATEWAY_SERVICE_HOST}
    env_file:
      - ../../config/.env.test
    networks:
      - backend
      - frontend
    ports:
      - "8080:8080"
    volumes:
      - "../../production/gateway/:/usr/app/gateway/"
      - "../../production/shared/src:/usr/app/gateway/src/shared"
      - "../../production/shared/scripts:/usr/app/gateway/scripts"
    depends_on:
      - users

  users:
    container_name: ${USERS_SERVICE_HOST}
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.development
      args:
        SERVICE_NAME: users
    env_file:
      - ../../config/.env.test
    restart: always
    hostname: ${USERS_SERVICE_HOST}
    networks:
      - backend
    ports:
      - "${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}"
    volumes:
      - "../../production/users/:/usr/app/users/"
      - "../../production/shared/src:/usr/app/users/src/shared"
      - "../../production/shared/scripts:/usr/app/users/scripts"

    depends_on:
      - users_db
  users_db:
    container_name: "${USERS_POSTGRES_HOST}"
    image: postgres
    restart: always
    networks:
      - backend
    environment:
      - POSTGRES_USER=${USERS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USERS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USERS_POSTGRES_DB}
      - POSTGRES_HOST=${USERS_POSTGRES_HOST}

    ports:
      - "${USERS_POSTGRES_PORT}:5432"
    volumes:
      - db-data-users:/var/lib/postgresql/data
  pepp:
    container_name: pepp
    restart: always
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.client.development
      args:
        SERVICE_NAME: posts
    env_file:
      - ../../config/.env.test
    ports:
      - "${CLIENT_PORT}:3000"
    networks:
      - frontend
    environment:
      - WATCHPACK_POLLING=true
    volumes:
      - "../../production/client/:/usr/app/client/"
  posts:
    container_name: ${POSTS_SERVICE_HOST}
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.development
      args:
        SERVICE_NAME: posts
    env_file:
      - ../../config/.env.test
    restart: always
    hostname: ${POSTS_SERVICE_HOST}
    networks:
      - backend
    ports:
      - "${POSTS_SERVICE_PORT}:${POSTS_SERVICE_PORT}"
    volumes:
      - "../../production/posts/:/usr/app/posts/"
      - "../../production/shared/src:/usr/app/posts/src/shared"
      - "../../production/shared/scripts:/usr/app/posts/scripts"

    depends_on:
      - posts_db
  posts_db:
    container_name: "${POSTS_POSTGRES_HOST}"
    image: postgres
    restart: always
    networks:
      - backend
    environment:
      - POSTGRES_USER=${POSTS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTS_POSTGRES_DB}
      - POSTGRES_HOST=${POSTS_POSTGRES_HOST}
    ports:
      - "${POSTS_POSTGRES_PORT}:5432"
    volumes:
      - db-data-posts:/var/lib/postgresql/data

volumes:
  db-data-users:
  db-data-posts:
  # Uncomment to enable MongoDB
  # db:
  #   image: "mongo"
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
  #     MONGO_USER: ${MONGO_USER}
  #     MONGO_PASSWORD: ${MONGO_PASSWORD}
  #     TZ: "Europe/Warsaw"
  #   volumes:
  #     - "./db/data/db-files:/data/db"
  #     - "./db/init/:/docker-entrypoint-initdb.d/"
  #   ports:
  #     - 27017:27017
  #   networks:
  #     - backend

  # Uncomment to enable redis
  # redis:
  #   image: redis
  #   restart: always
  #   hostname: redis
  #   networks:
  #     - backend
  #   env_file:
  #     - .env

  # Uncomment to enable RabbitMQ
  # rabbitmq:
  #   image: rabbitmq:3-management
  #   restart: always
  #   hostname: rabbitmq
  #   networks:
  #     - frontend
  #     - backend
  #   env_file:
  #     - .env
  #   # Uncomment to initialize RabbitMQ with predefined configuration
  #   # volumes:
  #   #  - './configs/rabbitmq-init.json:/tmp/rabbitmq-init.json'
  #   # environment:
  #   #  - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management load_definitions "/tmp/rabbitmq-init.json"

  #   # Uncomment to expose RabbitMQ Management service port
  #   # ports:
  #   #  - "15672:15672"

