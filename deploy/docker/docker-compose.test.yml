networks:
  default:
    driver: bridge
  frontend:
    name: infrastructure
    driver: bridge

# ADD CONFIG TO BUILD

services:
  gateway:
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.development
      args:
        SERVICE_NAME: gateway
    restart: always
    env_file:
      - ../../config/.env.test
    networks:
      - default
      - frontend
    ports:
      - "8080:8080"
    volumes:
      - "../../production/gateway/:/usr/app/gateway/"
      - "../../production/_shared:/usr/app/gateway/src/_shared"
#      - "../../production/_shared/scripts:/usr/app/gateway/scripts"
#      - "../../production/_shared/config:/usr/app/gateway/config"
    depends_on:
      - users
      - posts

  users:
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.development
      args:
        SERVICE_NAME: users
    env_file:
      - ../../config/.env.test
    restart: always
    ports:
      - "${USERS_SERVICE_PORT}:${USERS_SERVICE_PORT}"
    volumes:
      - "../../production/users/:/usr/app/users/"
      - "../../production/_shared:/usr/app/users/src/_shared"
#      - "../../production/_shared/scripts:/usr/app/users/scripts"
#      - "../../production/_shared/config:/usr/app/users/config"
    depends_on:
      - users_db
  users_db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=${USERS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${USERS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${USERS_POSTGRES_DB}
      - POSTGRES_HOST=${USERS_POSTGRES_HOST}

    ports:
      - "${USERS_POSTGRES_PORT}:5432"
    volumes:
      - db-data-users:/var/lib/postgresql/data
  client:
    restart: always
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.client.development
      args:
        SERVICE_NAME: posts
    env_file:
      - ../../config/.env.test
    ports:
      - "${CLIENT_PORT}:3000"
    networks:
      - frontend
    environment:
      - WATCHPACK_POLLING=true
    volumes:
      - "../../production/client/:/usr/app/client/"
      - "../../production/_shared/config:/usr/app/client/config"
  posts:
    build:
      context: ../../production
      dockerfile: ../deploy/docker/Dockerfile.development
      args:
        SERVICE_NAME: posts
    env_file:
      - ../../config/.env.test
    restart: always
    ports:
      - "${POSTS_SERVICE_PORT}:${POSTS_SERVICE_PORT}"
    volumes:
      - "../../production/posts/:/usr/app/posts/"
      - "../../production/_shared:/usr/app/posts/src/_shared"
      - certs:/usr/app/posts/certs
#      - "../../production/_shared/scripts:/usr/app/posts/scripts"
#      - "../../production/_shared/config:/usr/app/posts/config"
    depends_on:
      - posts_db
      - es01
  posts_db:
    image: postgres
    restart: always
    environment:
      - POSTGRES_USER=${POSTS_POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTS_POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTS_POSTGRES_DB}
      - POSTGRES_HOST=${POSTS_POSTGRES_HOST}
    ports:
      - "${POSTS_POSTGRES_PORT}:5432"
    volumes:
      - db-data-posts:/var/lib/postgresql/data
  posts_elastic_setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - ../setup.elastic.sh:/usr/local/bin/setup.sh
    user: "0"
    command: ["/bin/bash", "/usr/local/bin/setup.sh"]
    env_file:
      - ../../config/.env.test
    healthcheck:
      test: [ "CMD-SHELL", "[ -f config/certs/es01/es01.crt ]" ]
      interval: 1s
      timeout: 5s
      retries: 120
  es01:
    depends_on:
      posts_elastic_setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
      - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    #    mem_limit: ${ES_MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
#    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
  metricbeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    command: ["--strict.perms=false"]
#      - 'chmod 644 metricbeat/metricbeat.yml'
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "../metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://posts_elastic_db:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    command: ["--strict.perms=false"]
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - "./filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "../filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - "/var/lib/docker/containers:/var/lib/docker/containers:ro"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://posts_elastic_db:9200
      - KIBANA_HOSTS=http://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
#    command: ["--strict.perms=false"]
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "../logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://posts_elastic_db:9200
#      - ELASTIC_HOSTS=https://es01:9200
  redis:
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 60 1 --loglevel warning --requirepass ${REDIS_PASSWORD}
    volumes:
      - ./data:/data


volumes:
  db-data-users:
  db-data-posts:
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local
  # Uncomment to enable MongoDB
  # db:
  #   image: "mongo"
  #   restart: always
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER}
  #     MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
  #     MONGO_INITDB_DATABASE: ${MONGO_DATABASE}
  #     MONGO_USER: ${MONGO_USER}
  #     MONGO_PASSWORD: ${MONGO_PASSWORD}
  #     TZ: "Europe/Warsaw"
  #   volumes:
  #     - "./db/data/db-files:/data/db"
  #     - "./db/init/:/docker-entrypoint-initdb.d/"
  #   ports:
  #     - 27017:27017
  #   networks:
  #     - backend

  # Uncomment to enable redis
  # redis:
  #   image: redis
  #   restart: always
  #   hostname: redis
  #   networks:
  #     - backend
  #   env_file:
  #     - .env

  # Uncomment to enable RabbitMQ
  # rabbitmq:
  #   image: rabbitmq:3-management
  #   restart: always
  #   hostname: rabbitmq
  #   networks:
  #     - frontend
  #     - backend
  #   env_file:
  #     - .env
  #   # Uncomment to initialize RabbitMQ with predefined configuration
  #   # volumes:
  #   #  - './configs/rabbitmq-init.json:/tmp/rabbitmq-init.json'
  #   # environment:
  #   #  - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbitmq_management load_definitions "/tmp/rabbitmq-init.json"

  #   # Uncomment to expose RabbitMQ Management service port
  #   # ports:
  #   #  - "15672:15672"

